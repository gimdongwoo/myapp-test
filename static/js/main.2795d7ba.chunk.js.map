{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","React","Component","Boolean","window","location","hostname","match","ReactDOM","hydrate","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCMlCC,gMAyCF,OACEC,EAAAC,EAAAC,cAAA,iCA1CYC,IAAMC,YAmKTL,GAlGaI,IAAMC,UAkCZD,IAAMC,UAgEbL,GC7JKM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,QAAQX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2795d7ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst API = \"https://api.github.com/users\";\n\nclass App extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     username: \"theham3d\",\n  //     name: \"\",\n  //     avatar: \"\",\n  //     location: \"\",\n  //     repos: \"\",\n  //     followers: \"\",\n  //     following: \"\",\n  //     homeUrl: \"\",\n  //     notFound: \"\"\n  //   };\n  // }\n\n  // fetchProfile(username) {\n  //   let url = `${API}/${username}`;\n  //   fetch(url)\n  //     .then(res => res.json())\n  //     .then(data => {\n  //       this.setState({\n  //         username: data.login,\n  //         name: data.name,\n  //         avatar: data.avatar_url,\n  //         location: data.location,\n  //         repos: data.public_repos,\n  //         followers: data.followers,\n  //         following: data.following,\n  //         homeUrl: data.html_url,\n  //         notFound: data.message\n  //       });\n  //     })\n  //     .catch(error => console.log(\"Oops! . There Is A Problem\"));\n  // }\n\n  // componentDidMount() {\n  //   this.fetchProfile(this.state.username);\n  // }\n\n  render() {\n    return (\n      <div>hello world</div>\n    )\n    // return (\n    //   <div>\n    //     <section id=\"card\">\n    //       <SearchProfile fetchProfile={this.fetchProfile.bind(this)} />\n    //       <Profile data={this.state} />\n    //     </section>\n    //     <span className=\"hesmaili\">\n    //       GitHub Card With ReactJs - Created By{\" \"}\n    //       <a\n    //         href=\"https://twitter.com/theham3d\"\n    //         target=\"_blank\"\n    //         title=\"Hamed Esmaili\"\n    //       >\n    //         Hamed Esmaili\n    //       </a>\n    //     </span>\n    //   </div>\n    // );\n  }\n}\n\nclass SearchProfile extends React.Component {\n  state = {\n    username: \"\"\n  };\n\n  handleForm = e => {\n    e.preventDefault();\n    this.props.fetchProfile(this.state.username);\n    this.setState({ ...this.state, username: \"\" });\n  };\n\n  updateUserName = e => {\n    let username = e.target.value;\n    this.setState({ ...this.state, username });\n  };\n\n  render() {\n    return (\n      <div className=\"search--box\">\n        <form onSubmit={this.handleForm}>\n          <label>\n            <input\n              type=\"search\"\n              onChange={this.updateUserName}\n              value={this.state.username}\n              placeholder=\"Type Username + Enter\"\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nclass Profile extends React.Component {\n  render() {\n    let data = this.props.data;\n    let followers = `${data.homeUrl}/followers`;\n    let repositories = `${data.homeUrl}?tab=repositories`;\n    let following = `${data.homeUrl}/following`;\n    if (data.notFound === \"Not Found\")\n      return (\n        <div className=\"notfound\">\n          <h2>Oops !!!</h2>\n          <p>\n            The Component Couldn't Find The You Were Looking For . Try Again{\" \"}\n          </p>\n        </div>\n      );\n    else\n      return (\n        <section className=\"github--profile\">\n          <div className=\"github--profile__info\">\n            <a\n              href={data.homeUrl}\n              target=\"_blank\"\n              title={data.name || data.username}\n            >\n              <img src={data.avatar} alt={data.username} />\n            </a>\n            <h2>\n              <a href={data.homeUrl} title={data.username} target=\"_blank\">\n                {data.name || data.username}\n              </a>\n            </h2>\n            <h3>{data.location || \"I Live In My Mind\"}</h3>\n          </div>\n          <div className=\"github--profile__state\">\n            <ul>\n              <li>\n                <a href={followers} target=\"_blank\" title=\"Number Of Followers\">\n                  <i>{data.followers}</i>\n                  <span>Followers</span>\n                </a>\n              </li>\n              <li>\n                <a\n                  href={repositories}\n                  target=\"_blank\"\n                  title=\"Number Of Repositoriy\"\n                >\n                  <i>{data.repos}</i>\n                  <span>Repositoriy</span>\n                </a>\n              </li>\n              <li>\n                <a href={following} target=\"_blank\" title=\"Number Of Following\">\n                  <i>{data.following}</i>\n                  <span>Following</span>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </section>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}